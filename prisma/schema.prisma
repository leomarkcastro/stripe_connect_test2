// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------- NEXT AUTH DATA MODEL

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// When creating relations between models, you can refer to this model.
model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?           @map("email_verified")
  image              String?
  accounts           Account[]
  sessions           Session[]
  CredentialPassword CredentialPassword?
  AccountStripeBind  AccountStripeBind[]

  @@map("users")
}

model CredentialPassword {
  id       String @id @default(cuid())
  userId   String @unique @map("user_id")
  password String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credentialpasswords")
}

// --------------------------------- DATABASE DATA

model AccountStripeBind {
  id       String @id @default(cuid())
  userId   String @map("user_id")
  stripeId String @map("stripe_id")
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accountstripebinds")
}
